// <auto-generated />
using System;
using Dota2ApiCore2._2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dota2ApiCore2._2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dota2Api.Models.TblGroupStage", b =>
                {
                    b.Property<int>("GroupStageId");

                    b.Property<int>("Draw");

                    b.Property<string>("GroupName");

                    b.Property<int>("Lose");

                    b.Property<int>("Points");

                    b.Property<int>("TeamId");

                    b.Property<int>("TournementId");

                    b.Property<int>("Win");

                    b.HasKey("GroupStageId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournementId");

                    b.ToTable("TblGroupStages");
                });

            modelBuilder.Entity("Dota2Api.Models.TblMainStage", b =>
                {
                    b.Property<int>("MainStageId");

                    b.Property<string>("BracketType");

                    b.Property<int>("Levels");

                    b.Property<int>("MainStagePairId");

                    b.Property<int>("TeamAId");

                    b.Property<int>("TeamBId");

                    b.Property<int>("TournementId");

                    b.HasKey("MainStageId");

                    b.HasIndex("TournementId");

                    b.ToTable("TblMainStages");
                });

            modelBuilder.Entity("Dota2Api.Models.TblTeam", b =>
                {
                    b.Property<int>("TeamId");

                    b.Property<string>("Description");

                    b.Property<string>("Logo_Url");

                    b.Property<string>("Tag")
                        .IsRequired();

                    b.Property<string>("TeamName")
                        .IsRequired();

                    b.HasKey("TeamId");

                    b.ToTable("TblTeams");
                });

            modelBuilder.Entity("Dota2Api.Models.TblTournement", b =>
                {
                    b.Property<int>("TournementId");

                    b.Property<DateTime>("FromDate");

                    b.Property<string>("Location");

                    b.Property<long>("PricePool");

                    b.Property<DateTime>("ToDate");

                    b.Property<string>("TournementFullName");

                    b.Property<string>("TournementImageUrl")
                        .IsRequired();

                    b.Property<string>("TournementName")
                        .IsRequired();

                    b.HasKey("TournementId");

                    b.ToTable("TblTournements");
                });

            modelBuilder.Entity("Dota2Api.Models.TblTournementTeam", b =>
                {
                    b.Property<int>("TournementTeamId");

                    b.Property<string>("StandFor");

                    b.Property<int>("TeamId");

                    b.Property<int>("TournementId");

                    b.HasKey("TournementTeamId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TournementId");

                    b.ToTable("TblTournementTeams");
                });

            modelBuilder.Entity("Dota2Api.Models.TblVideo", b =>
                {
                    b.Property<int>("VideoId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("EventStage")
                        .IsRequired();

                    b.Property<int>("MainStageId");

                    b.Property<DateTime>("MatchDate");

                    b.Property<int>("MatchNum");

                    b.Property<int>("TeamAId");

                    b.Property<int>("TeamBId");

                    b.Property<string>("TeamWin");

                    b.Property<int>("TournementId");

                    b.Property<int>("UserCreate");

                    b.Property<string>("VideoTitle")
                        .IsRequired();

                    b.Property<string>("VideoUrl")
                        .IsRequired();

                    b.HasKey("VideoId");

                    b.ToTable("TblVideos");
                });

            modelBuilder.Entity("Dota2Api.Models.TblGroupStage", b =>
                {
                    b.HasOne("Dota2Api.Models.TblTeam", "TblTeam")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dota2Api.Models.TblTournement", "TblTournement")
                        .WithMany()
                        .HasForeignKey("TournementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dota2Api.Models.TblMainStage", b =>
                {
                    b.HasOne("Dota2Api.Models.TblTournement", "TblTournement")
                        .WithMany()
                        .HasForeignKey("TournementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dota2Api.Models.TblTournementTeam", b =>
                {
                    b.HasOne("Dota2Api.Models.TblTeam", "TblTeam")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dota2Api.Models.TblTournement", "TblTournement")
                        .WithMany("TblTournementTeam")
                        .HasForeignKey("TournementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
